Compilation Results:
********************
maze.c: In function ‘createMaze’:
maze.c:54:33: warning: assignment makes pointer from integer without a cast [enabled by default]
           maze->cells[i*cols+j] = h; //add it to struct
                                 ^
maze.c:55:37: warning: comparison between pointer and integer [enabled by default]
           if (maze->cells[i*cols+j] == START) { //if the character is 'S'
                                     ^
maze.c:59:37: warning: comparison between pointer and integer [enabled by default]
           if (maze->cells[i*cols+j] == END) { //if character is 'E'
                                     ^
maze.c: In function ‘printMaze’:
maze.c:101:67: warning: assignment makes pointer from integer without a cast [enabled by default]
   maze->cells[(maze->startRow)*(maze->width)+(maze->startColumn)] = START; //make sure start char is still there
                                                                   ^
maze.c:105:7: warning: format ‘%c’ expects argument of type ‘int’, but argument 2 has type ‘char *’ [-Wformat=]
       printf("%c", maze->cells[i*(maze->width)+j]); //print the char
       ^
maze.c: In function ‘solveMazeDFS’:
maze.c:126:42: warning: comparison between pointer and integer [enabled by default]
   if (maze->cells[row*(maze->width)+col] == END){ //if (col,row) is at the end of the maze
                                          ^
maze.c:129:47: warning: comparison between pointer and integer [enabled by default]
   else if (maze->cells[row*(maze->width)+col] == EMPTY || maze->cells[row*(maze->width)+col] == START){ //if cell is empty or start
                                               ^
maze.c:129:94: warning: comparison between pointer and integer [enabled by default]
   else if (maze->cells[row*(maze->width)+col] == EMPTY || maze->cells[row*(maze->width)+col] == START){ //if cell is empty or start
                                                                                              ^
maze.c:130:40: warning: assignment makes pointer from integer without a cast [enabled by default]
     maze->cells[row*(maze->width)+col] = VISITED; //mark as visited
                                        ^
maze.c:132:42: warning: assignment makes pointer from integer without a cast [enabled by default]
       maze->cells[row*(maze->width)+col] = PATH; //mark as path
                                          ^
maze.c:136:42: warning: assignment makes pointer from integer without a cast [enabled by default]
       maze->cells[row*(maze->width)+col] = PATH; //mark as path
                                          ^
maze.c:140:42: warning: assignment makes pointer from integer without a cast [enabled by default]
       maze->cells[row*(maze->width)+col] = PATH; //mark as path
                                          ^
maze.c:144:42: warning: assignment makes pointer from integer without a cast [enabled by default]
       maze->cells[row*(maze->width)+col] = PATH; //mark as path
                                          ^

Testing createMaze (20 pts)

Testing destroyMaze (10 pts)
destroyMaze score: 10 points if no memory leaks/errors otherwise 0
==36991== Memcheck, a memory error detector
==36991== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==36991== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==36991== Command: ./grader 1
==36991== 
==36991== 
==36991== HEAP SUMMARY:
==36991==     in use at exit: 2,601 bytes in 51 blocks
==36991==   total heap usage: 54 allocs, 3 frees, 3,609 bytes allocated
==36991== 
==36991== LEAK SUMMARY:
==36991==    definitely lost: 2,601 bytes in 51 blocks
==36991==    indirectly lost: 0 bytes in 0 blocks
==36991==      possibly lost: 0 bytes in 0 blocks
==36991==    still reachable: 0 bytes in 0 blocks
==36991==         suppressed: 0 bytes in 0 blocks
==36991== Rerun with --leak-check=full to see details of leaked memory
==36991== 
==36991== For lists of detected and suppressed errors, rerun with: -s
==36991== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)

Testing printMaze 
PrintMazeScore: 0

0
Failed the nightly test.
This nightly test is focusing on compilation error not functionality test.
This nightly report only tests on the released testcases.
There are many hidden edge testcase for the MP. Please test it yourselve.
HIGHLY RECOMMEND YOU TO START YOUR MP EARLY!!!!!!!
Timestamp: 2022-04-10_00:25:39
